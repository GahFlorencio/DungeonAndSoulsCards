/**
 * HeroManager - Gerencia as cartas de her√≥is
 * Respons√°vel por carregar, randomizar e gerenciar os her√≥is da partida
 */

class HeroManager {
    constructor() {
        this.allHeroes = [];
        this.selectedHeroes = [];
        this.heroVariations = new Map(); // Armazena as varia√ß√µes dos her√≥is para a partida
    }

    /**
     * Carrega os dados dos her√≥is do arquivo JSON
     */
    async loadHeroes() {
        try {
            const response = await fetch('configs/cards/heros.json');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const data = await response.json();
            this.allHeroes = data.heros;
            console.log('‚úÖ Her√≥is carregados:', this.allHeroes.length);
            console.log('üìã Her√≥is dispon√≠veis:', this.allHeroes.map(h => `${h.id}: ${h.name}`));
        } catch (error) {
            console.error('‚ùå Erro ao carregar her√≥is:', error);
            // Fallback com dados b√°sicos caso o arquivo n√£o carregue
            this.allHeroes = [
                { id: 1, name: "Goliath B√°rbaro", str: 10, dex: 4, int: 3, con: 8, def: 5 },
                { id: 2, name: "Meio-Orc Guerreiro", str: 9, dex: 5, int: 3, con: 7, def: 6 },
                { id: 3, name: "Elfo da Floresta Ladino", str: 4, dex: 10, int: 6, con: 5, def: 4 },
                { id: 5, name: "Tiefling Mago", str: 2, dex: 4, int: 10, con: 4, def: 3 },
                { id: 9, name: "Humano Paladino", str: 7, dex: 5, int: 5, con: 6, def: 10 }
            ];
        }
    }

    /**
     * Randomiza 3 her√≥is para a partida e suas varia√ß√µes
     */
    randomizeHeroesForGame() {
        // Embaralha todos os her√≥is dispon√≠veis
        const shuffled = [...this.allHeroes].sort(() => Math.random() - 0.5);
        
        // Seleciona os primeiros 3
        this.selectedHeroes = shuffled.slice(0, 3);
        
        // Para cada her√≥i selecionado, randomiza uma varia√ß√£o (1, 2 ou 3)
        this.selectedHeroes.forEach(hero => {
            const variation = Math.floor(Math.random() * 3) + 1; // 1, 2 ou 3
            this.heroVariations.set(hero.id, variation);
        });

        console.log('Her√≥is selecionados para a partida:', this.selectedHeroes);
        console.log('Varia√ß√µes dos her√≥is:', Array.from(this.heroVariations.entries()));
        
        return this.selectedHeroes;
    }

    /**
     * Retorna o caminho da imagem para um her√≥i espec√≠fico
     */
    getHeroImagePath(heroId) {
        const variation = this.heroVariations.get(heroId) || 1;
        const imagePath = `assets/images/cards/webp/hero_${heroId}_${variation}.webp`;
        console.log(`üñºÔ∏è Caminho da imagem para her√≥i ${heroId}:`, imagePath);
        return imagePath;
    }

    /**
     * Retorna a varia√ß√£o de um her√≥i
     */
    getHeroVariation(heroId) {
        return this.heroVariations.get(heroId) || 1;
    }

    /**
     * Retorna os her√≥is selecionados para a partida atual
     */
    getSelectedHeroes() {
        return this.selectedHeroes;
    }

    /**
     * Retorna um her√≥i espec√≠fico pelo ID
     */
    getHeroById(heroId) {
        return this.allHeroes.find(hero => hero.id === heroId);
    }
}

// Inst√¢ncia global do gerenciador de her√≥is
window.heroManager = new HeroManager();
